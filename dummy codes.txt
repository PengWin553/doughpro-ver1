<?php
    session_start();
    include('connection.php');

    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $gmail = $_POST['user_email'];
        $password = $_POST['password_hash'];

        try {
            $sql = "SELECT * FROM users_table WHERE user_email = :gmail AND password_hash = :password";
            $stmt = $connection->prepare($sql);
            $stmt->bindParam(':gmail', $gmail);
            $stmt->bindParam(':password', $password);
            $stmt->execute();

            $row = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($row) {
                // Matching input found

                // SET SESSION GLOBAL VARIABLES
                $_SESSION["user_id"] = $row["user_id"];
                $_SESSION["user_name"] = $row["user_name"];
                $_SESSION["user_role"] = $row["user_role"];
                $_SESSION["last_login_date"] = $row["last_login_date"];

                // Update last login date
                $updateSql = "UPDATE users_table SET last_login_date = NOW() WHERE user_id = :user_id";
                $updateStmt = $connection->prepare($updateSql);
                $updateStmt->bindParam(':user_id', $_SESSION["user_id"]);
                $updateStmt->execute();

                // Redirect based on user role
                if ($_SESSION["user_role"] == "Admin") {
                    // Redirect to admin dashboard
                    echo json_encode(["res" => "success", "message" => "Login successful!", "redirect_url" => "admin-dashboard.php"]);
                } else if ($_SESSION["user_role"] == "manager") {
                    // Redirect to manager dashboard or specific manager page
                    echo json_encode(["res" => "success", "message" => "Login successful!", "redirect_url" => "manager-dashboard.php"]);
                } else {
                    // Redirect to default user dashboard or homepage
                    echo json_encode(["res" => "success", "message" => "Login successful!", "redirect_url" => "user-dashboard.php"]);
                }
            } else {
                // No matching input found
                echo json_encode(["res" => "error", "message" => "Username or password incorrect"]);
            }
        } catch (PDOException $th) {
            echo json_encode(['res' => 'error', 'message' => $th->getMessage()]);
        }
    } else {
        echo json_encode(['res' => 'error', 'message' => 'Invalid request method']);
    }
?>

// LOGIN.PHP CODE WITH NO HASHING -----------------------------------------
<?php
session_start();
include('connection.php');

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $gmail = $_POST['user_email']; // Correct variable name
    $password = $_POST['password_hash']; // Correct variable name

    try {
        $sql = "SELECT * FROM users_table WHERE user_email = :gmail AND password_hash = :password";
        $stmt = $connection->prepare($sql);
        $stmt->bindParam(':gmail', $gmail); // Correct parameter name
        $stmt->bindParam(':password', $password); // Correct parameter name
        $stmt->execute();

        $row = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($row) {
            // Matching input found

            // SET SESSION GLOBAL VARIABLES
            $_SESSION["user_id"] = $row["user_id"];
            $_SESSION["user_name"] = $row["user_name"];
            $_SESSION["user_role"] = $row["user_role"];
            $_SESSION["last_login_date"] = $row["last_login_date"];

            // Update last login date
            $updateSql = "UPDATE users_table SET last_login_date = NOW() WHERE user_id = :user_id";
            $updateStmt = $connection->prepare($updateSql);
            $updateStmt->bindParam(':user_id', $_SESSION["user_id"]);
            $updateStmt->execute();
            
            echo json_encode(["res" => "success", "message" => "Login successful!", "user_name" => $row["user_name"], "user_role" => $row["user_role"]]);
        } else {
            // No matching input found
            echo json_encode(["res" => "error", "message" => "Username or password incorrect"]);
        }
    } catch (PDOException $th) {
        echo json_encode(['res' => 'error', 'message' => $th->getMessage()]);
    }
} else {
    echo json_encode(['res' => 'error', 'message' => 'Invalid request method']);
}


USING BCRYPT: 
<?php
include('connection.php');
session_start();

if (!isset($_SESSION["user_name"])) {
    header("location:../index.php");
}

$user_name = $_SESSION["user_name"];
$user_id =  $_SESSION["user_id"];
try {

    // Check if the admin credentials already exist
    $checkStmt = $connection->prepare("SELECT * FROM users_table WHERE user_email = :email");
    $checkStmt->bindParam(':email', $adminEmail);
    $checkStmt->execute();
    $adminExists = $checkStmt->fetch();

    if (!$adminExists) {
        // Define the admin's email
        $adminEmail = 'pengwin553@gmail.com';
        $role = 'Admin';
        $adminName = 'Peng Win';

        // Define the admin's password
        $adminPassword = 'sugarmami69'; // Choose a secure password for the admin
        // Generate a unique salt for the admin
        $adminSalt = bin2hex(random_bytes(16)); // Generate a 16-byte (128-bit) random salt
        // Concatenate the password with the salt value
        $adminPasswordSalted = $adminPassword . $adminSalt;

        // Use bcrypt to hash the salted password
        $hashedPassword = password_hash($adminPassword, PASSWORD_BCRYPT);

        // Insert the admin's credentials into the database
        $stmt = $connection->prepare("INSERT INTO users_table (user_role, user_name, user_email, password_hash, salt) VALUES (:role, :name, :email, :password, :salt)");
        $role = 'Admin'; // Set the user role to Admin
        $stmt->bindParam(':role', $role);
        $stmt->bindParam(':name', $adminName);
        $stmt->bindParam(':email', $adminEmail);
        $stmt->bindParam(':password', $hashedPassword);
        $stmt->bindParam(':salt', $adminSalt);
        $stmt->execute();

        echo "Admin credentials inserted successfully!";
    } else {
        echo "Admin credentials already exist!";
    }
} catch(PDOException $e) {
    echo "Error: " . $e->getMessage();
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Insert Admin Credentials</title>
</head>
<body>
    <h2>Insert Admin Credentials</h2>
    <form method="post" >
        <button type="submit" name="insert_admin">Insert Admin Credentials</button>
    </form>
</body>
</html>